/**
 *
 * Copyright 2009-2010 Streamsource AB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package se.streamsource.streamflow.web.infrastructure.event;

import org.qi4j.api.injection.scope.Structure;
import org.qi4j.api.mixin.Mixins;
import org.qi4j.api.service.ServiceComposite;
import org.qi4j.api.value.ValueBuilder;
import org.qi4j.api.value.ValueBuilderFactory;
import se.streamsource.streamflow.infrastructure.event.DomainEvent;
import se.streamsource.streamflow.infrastructure.event.EventListener;
import se.streamsource.streamflow.infrastructure.event.TransactionEvents;

import java.util.ArrayList;
import java.util.List;

/**
 * Service that collects all events for a particular thread and then
 * makes them available as a TransactionEvents. This is mostly used
 * by the REST resources that are returning the events generated by
 * a command execution.
 *
 */
@Mixins(CommandEventListenerService.Mixin.class)
public interface CommandEventListenerService
      extends EventListener, CommandEvents, ServiceComposite
{
   class Mixin
         implements EventListener, CommandEvents
   {
      @Structure
      ValueBuilderFactory vbf;

      ThreadLocal<List<DomainEvent>> events = new ThreadLocal<List<DomainEvent>>()
      {
         @Override
         protected List<DomainEvent> initialValue()
         {
            return new ArrayList<DomainEvent>();
         }
      };

      public void notifyEvent( DomainEvent event )
      {
         events.get().add( event );
      }

      public void reset()
      {
         events.get().clear();
      }

      public TransactionEvents commandEvents()
      {
         List<DomainEvent> list = events.get();

         ValueBuilder<TransactionEvents> builder = vbf.newValueBuilder( TransactionEvents.class );
         builder.prototype().timestamp().set( System.currentTimeMillis() );
         builder.prototype().events().get().addAll( list );

         return builder.newInstance();
      }
   }
}

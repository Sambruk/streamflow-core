<?xml version="1.0" encoding="UTF-8"?>
<!--


    Copyright (c) 2009 Streamsource AB
    All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<faqs title="Frequently Asked Questions" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:noNamespaceSchemaLocation="http://maven.apache.org/maven-1.x/plugins/faq/faq.xsd">
    <part id="operational">
        <title>Some Common Question</title>
        <faq id="some-common-question">
            <question>How do I change <tt>this</tt> to <tt>that</tt>?</question>
            <answer>
                <p>
                    Changing this to that is a common operation, but it's trickier that it sounds.
                </p>
                <p>
                    There are basically two ways to do this:
                </p>
                <ol>
                    <li>Use a search that finds all <tt>this</tt> instances. Use a MagicMapper
                    implementation that just returns <tt>that</tt> and apply it to the search result</tt>.
                    </li>
                    <li>Simply change <tt>this</tt> directly in the IDE.
                    </li>
                </ol>
            </answer>
        </faq>
    </part>
<!-- Examples:
    <part id="general">
        <title>General</title>
        <faq id="requirements">
            <question>Do I need any other SOAP framework to run Spring Web Services?</question>
            <answer>
                You don't need any other SOAP framework to use Spring Web services, though it can use some of the
                features of Axis 1 and 2.
            </answer>
        </faq>
        <faq id="namespace_err">
            <question>I get <tt>NAMESPACE_ERR</tt> exceptions when using Spring-WS. What can I do about it?</question>
            <answer>
                <p>
                    If you get the following Exception:
                </p>
                <pre>
NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.
                </pre>
                <p>
                    Most often, this exception is related to an older version of Xalan being used. Make sure to upgrade
                    to 2.7.0.
                </p>
            </answer>
        </faq>

    </part>
    <part id="java">
        <title>Java</title>
        <faq id="java-1.4">
            <question>Does Spring-WS work under Java 1.4?</question>
            <answer>
                <p>
                    Spring Web Services works under Java 1.4, but it requires some effort to make it work. Java 1.4 is
                    bundled with the older XML parser Crimson, which does not handle namespaces correctly. Additionally,
                    it is bundled with an older version of Xalan, which also has problems.
                    Unfortunately, placing newer versions of these on the class path does not override them.
                    See <a href="http://xml.apache.org/xalan-j/faq.html#faq-N100D6">this FAQ</a> entry on the Xalan
                    site, and also <a href="http://xerces.apache.org/xerces2-j/faq-general.html#faq-4">this entry</a>
                    on the Xerces site.
                </p>
                <p>
                    The only solution that works is to add newer versions of Xerces and Xalan in the lib/endorsed
                    directory of your JDK, as explained in those FAQs (i.e.<tt>$JAVA_HOME/lib/endorsed</tt>).
                    The following libraries are known to work with Java 1.4.2:
                </p>
                <table class="bodyTable">
                    <tbody>
                        <tr><th>Library</th><th>Version</th></tr>
                        <tr><td><a href="http://xerces.apache.org/xerces2-j/">Xerces</a></td><td>2.8.1</td></tr>
                        <tr><td><a href="http://xml.apache.org/xalan-j/">Xalan</a></td><td>2.7.0</td></tr>
                        <tr><td><a href="http://xerces.apache.org/xerces2-j/">XML-APIs</a></td><td>1.3.04</td></tr>
                        <tr><td><a href="http://java.sun.com/webservices/downloads/1.3/index.html">SAAJ</a></td><td>1.2</td></tr>
                    </tbody>
                </table>
                <p>
                    If you want to use WS-Security, note that the <code>XwsSecurityInterceptor</code> requires Java 5,
                    because an underlying library (XWSS) requires it. Instead, you can use the
                    <code>Wss4jSecurityInterceptor</code>.
                </p>
            </answer>
        </faq>
        <faq id="java-1.6">
            <question>Does Spring-WS work under Java 1.6?</question>
            <answer>
                <p>
                    Java 1.6 ships with SAAJ 1.3, JAXB 2.0, and JAXP 1.4 (a custom version of Xerces and Xalan).
                    Overriding these libraries by putting different version on the classpath will result in various
                    classloading issues, or exceptions in <tt>org.apache.xml.serializer.ToXMLSAXHandler</tt>.
                    The only option for using more recent versions is to put the newer version in the
                    <code>endorsed</code> directory (see above).
                </p>
            </answer>
        </faq>
    </part>
-->
</faqs>
